-- customALU (Bloque unificador)
-- Autores: Santiago Márquez
--				Brayan Pedraza
--				Sebastián Parrado
-------------------------------------------------------
LIBRARY IEEE;
USE ieee.std_logic_1164.all;
-------------------------------------------------------
ENTITY ALU IS
	GENERIC (MAX_WIDTH	:	integer := 8);
	PORT(		--A_in				:	IN		STD_LOGIC_VECTOR(MAX_WIDTH-1 DOWNTO 0);
				--B_in				:	IN		STD_LOGIC_VECTOR(MAX_WIDTH-1 DOWNTO 0);
				boton_in			:	IN		STD_LOGIC;
				rst_in			:	IN		STD_LOGIC;
				ena_in			:	IN		STD_LOGIC_VECTOR(3 DOWNTO 0);
				Overflow_out	:	OUT 	STD_LOGIC;
				result_out		:	OUT	STD_LOGIC_VECTOR(MAX_WIDTH-1 DOWNTO 0);
				-- Señales analizador
				clk_in		:	IN		STD_LOGIC; -- clk se usa para verificar funcionamiento en el analizador. clk de la FPGA
				--clkAna		:	OUT	STD_LOGIC; -- clk del analizador
				enaAna		:	OUT	STD_LOGIC_VECTOR(3 DOWNTO 0);
				BOTONANA		:	OUT	STD_LOGIC;
				clkAna	:	OUT		STD_LOGIC;
				rstAna	:	OUT	STD_LOGIC);
END ENTITY ALU;
-------------------------------------------------------
ARCHITECTURE structural OF ALU IS
-- Señales internas
	SIGNAL	A_in		:	STD_LOGIC_VECTOR(MAX_WIDTH-1 DOWNTO 0);
	SIGNAL	B_in		:	STD_LOGIC_VECTOR(MAX_WIDTH-1 DOWNTO 0);
	SIGNAL	B_neg_s 	:	STD_LOGIC_VECTOR(MAX_WIDTH-1 DOWNTO 0);
	SIGNAL	CinA2_s	:	STD_LOGIC;
	SIGNAL 	S_out		:	STD_LOGIC_VECTOR(MAX_WIDTH-1 DOWNTO 0);
	SIGNAL 	OR_out	:	STD_LOGIC_VECTOR(MAX_WIDTH-1 DOWNTO 0);
	SIGNAL 	AND_out	:	STD_LOGIC_VECTOR(MAX_WIDTH-1 DOWNTO 0);
	SIGNAL 	comp_out	:	STD_LOGIC_VECTOR(MAX_WIDTH-1 DOWNTO 0);
-------------------------------------------------------
BEGIN 
-- Cableado al analizador
	enaAna <= ena_in;
	BOTONANA<= boton_in;
	clkAna<= clk_in;
	rstAna<=rst_in;
	
-- Selección 
WITH ena_in SELECT
	result_out <= 	"ZZZZZZZZ" 	WHEN "0000", -- La customALU se encuentra apagada
						S_out 	WHEN "1000",	-- A+B
						S_out		WHEN "1001", 	--	A-B
						OR_out	WHEN "1010", 	-- A OR B
						AND_out	WHEN "1011",	-- A AND B
						Comp_out	WHEN "1100",	-- A = B, A < B, A > B
						"ZZZZZZZZ" WHEN OTHERS;
-------------------------------------------------------
------------------ Llamando bloques -------------------
-- Control (Números A y B)
	numeros: ENTITY work.customControl
		PORT MAP (	boton	=> boton_in,
						reset	=> rst_in,
						clk	=> clk_in,
						A		=> A_in,
						B		=> B_in);
-------------------------------------------------------
-- Complemento A2
	complement: ENTITY work.Complement
		PORT MAP	(	B			=> B_in,
						ena		=> ena_in(0), --
						B_neg		=> B_neg_s,
						Cin_A2	=> CinA2_s);
-------------------------------------------------------
-- Ripple Carry Adder
	Ripple: ENTITY work.RippleCarryAdder
		PORT MAP	(	A			=> A_in,
						B			=> B_neg_s,
						Cin		=> CinA2_s, --
						S			=> S_out,
						Overflow => Overflow_out);
-------------------------------------------------------
-- OR
	OR_Block: ENTITY work.nBitsOR
		PORT MAP (	x_OR	=> A_in,
						y_OR	=> B_in, --
						q_OR	=> OR_out);
-------------------------------------------------------						
-- AND
	AND_Block: ENTITY work.nBitsAND
		PORT MAP ( 	xAND	=> A_in,
						yAND	=> B_in, --
						qAND	=> AND_out);
-------------------------------------------------------
-- Comparador
	comparador: ENTITY work.nBitComparator
		PORT MAP ( 	x		=>	A_in,
						y		=>	B_in,
						comp	=>	comp_out);
-------------------------------------------------------
END ARCHITECTURE structural;
